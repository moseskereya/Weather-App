{"version":3,"sources":["Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","city","country","temperature","humidity","description","error","className","apiKey","Form","onWeather","onSubmit","e","type","name","placeholder","App","state","undefined","getWeather","a","preventDefault","currentTarget","elements","value","fetch","apiCall","json","main","sys","weather","setState","temp","console","log","message","style","width","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNA4CeA,EA1CC,SAAC,GAOV,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,QACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,YACAC,EACI,EADJA,MAEA,OACE,yBAAKC,UAAU,iBACZN,GAAQC,GACP,uBAAGK,UAAU,gBAAb,YACY,IACV,0BAAMA,UAAU,kBACb,IACAN,EAFH,KAEWC,IAKdC,GACC,uBAAGI,UAAU,gBAAb,gBACe,0BAAMA,UAAU,kBAAhB,IAAmCJ,IAInDC,GACC,uBAAGG,UAAU,gBAAb,aACY,0BAAMA,UAAU,kBAAhB,IAAmCH,EAAnC,MAIbC,GACC,uBAAGE,UAAU,gBAAb,cACa,0BAAMA,UAAU,kBAAhB,IAAmCF,IAIjDC,GAAS,uBAAGC,UAAU,kBAAkBD,KCnCzCE,G,YAAS,oCAaTC,EAAO,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACd,OACE,0BAAMC,SAAU,SAAAC,GAAC,OAAIF,EAAUE,KAC7B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9C,4BAAQR,UAAU,eAAlB,iBAuESS,E,2MAjEbC,MAAQ,CACNd,iBAAae,EACbjB,UAAMiB,EACNhB,aAASgB,EACTd,cAAUc,EACVb,iBAAaa,EACbZ,WAAOY,G,EAETC,W,uCAAa,WAAMP,GAAN,6BAAAQ,EAAA,yDACXR,EAAES,iBACIpB,EAAOW,EAAEU,cAAcC,SAAStB,KAAKuB,MACrCtB,EAAUU,EAAEU,cAAcC,SAASrB,QAAQsB,OAC7CvB,IAAQC,EAJD,0CAMeuB,MAAM,wFAAD,OAC+DxB,EAD/D,YACuEC,EADvE,kBACwFM,EADxF,kBANpB,cAMDkB,EANC,iBASoCA,EAAQC,OAT5C,iBASCC,EATD,EASCA,KAAMC,EATP,EASOA,IAAKf,EATZ,EASYA,KAAMgB,EATlB,EASkBA,QACzB,EAAKC,SAAS,CACZ5B,YAAayB,EAAKI,KAClB/B,KAAMa,EACNZ,QAAS2B,EAAI3B,QACbE,SAAUwB,EAAKxB,SACfC,YAAayB,EAAQ,GAAGzB,YACxBC,MAAO,KAhBF,kDAmBP2B,QAAQC,IAAI,KAAGC,SAnBR,gCAsBT,EAAKJ,SAAS,CACZ5B,iBAAae,EACbjB,UAAMiB,EACNhB,aAASgB,EACTd,cAAUc,EACVb,iBAAaa,EACbZ,MAAO,iCA5BA,0D,8HAiCX,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,YAAY6B,MAAO,CAAEC,MAAO,SACzC,yBAAK9B,UAAU,YACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAMG,UAAW4B,KAAKnB,aACtB,kBAAC,EAAD,CACEhB,YAAamC,KAAKrB,MAAMd,YACxBF,KAAMqC,KAAKrB,MAAMhB,KACjBC,QAASoC,KAAKrB,MAAMf,QACpBE,SAAUkC,KAAKrB,MAAMb,SACrBC,YAAaiC,KAAKrB,MAAMZ,YACxBC,MAAOgC,KAAKrB,MAAMX,iB,GAvDlBiC,aChBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e3a95a72.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = ({\r\n  city,\r\n  country,\r\n  temperature,\r\n  humidity,\r\n  description,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"weather__info\">\r\n      {city && country && (\r\n        <p className=\"weather__key\">\r\n          Location:{\" \"}\r\n          <span className=\"weather__value\">\r\n            {\" \"}\r\n            {city}, {country}\r\n          </span>\r\n        </p>\r\n      )}\r\n\r\n      {temperature && (\r\n        <p className=\"weather__key\">\r\n          Temperature: <span className=\"weather__value\"> {temperature}</span>\r\n        </p>\r\n      )}\r\n\r\n      {humidity && (\r\n        <p className=\"weather__key\">\r\n          Humidity: <span className=\"weather__value\"> {humidity} </span>\r\n        </p>\r\n      )}\r\n\r\n      {description && (\r\n        <p className=\"weather__key\">\r\n          Condition: <span className=\"weather__value\"> {description}</span>\r\n        </p>\r\n      )}\r\n\r\n      {error && <p className=\"weather__error\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\nexport default Weather;","import React, { Component } from \"react\";\nimport Weather from \"./Components/Weather\"\nimport \"./App.css\";\nimport \"bootstrap-4-react\"\n\nconst apiKey = \"8ddceeacaf8b95fe943c88fc8389dee0\";\n\n// const Title = () => {\n//   return (\n//     <div>\n//       <h1 className=\"title-container__title\">Weather Finder</h1>\n//       <h3 className=\"title-container__subtitle\">\n//           check out your weather now\n//       </h3>\n//     </div>\n//   );\n// };\n\nconst Form = ({ onWeather }) => {\n  return (\n    <form onSubmit={e => onWeather(e)}>\n      <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n      <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n      <button className=\"form-button\">get Weather</button>\n    </form>\n  );\n};\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.currentTarget.elements.city.value;\n    const country = e.currentTarget.elements.country.value;\n    if (city && country) {\n      try {\n        const apiCall = await fetch(\n          `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`\n        );\n        const { main, sys, name, weather } = await apiCall.json();\n        this.setState({\n          temperature: main.temp,\n          city: name,\n          country: sys.country,\n          humidity: main.humidity,\n          description: weather[0].description,\n          error: \"\"\n        });\n      } catch (ex) {\n        console.log(ex.message);\n      }\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"please enter a valid values.\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\" style={{ width: \"100%\" }}>\n            <div className=\"sub-main\">\n              <div className=\"form-container\">\n                <Form onWeather={this.getWeather} />\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}